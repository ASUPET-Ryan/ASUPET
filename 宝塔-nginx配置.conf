# ASUPET 网站 Nginx 配置文件
# 适用于宝塔面板

server {
    listen 80;
    listen 443 ssl http2;
    server_name 你的域名.com;  # 替换为你的实际域名
    
    # SSL 证书配置（如果使用HTTPS）
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
    
    # 网站根目录
    root /www/wwwroot/你的域名.com;  # 替换为你的实际路径
    index index.html;
    
    # 日志文件
    access_log /www/wwwlogs/你的域名.com.log;
    error_log /www/wwwlogs/你的域名.com.error.log;
    
    # 主要配置：支持前端路由
    location / {
        try_files $uri $uri/ /index.html;
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
    }
    
    # 静态资源缓存优化
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 跨域支持（如果需要）
        add_header Access-Control-Allow-Origin "*";
    }
    
    # API 代理（如果有后端API）
    # location /api/ {
    #     proxy_pass http://your-backend-server;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问备份文件
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 强制HTTPS重定向（可选）
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }
}
